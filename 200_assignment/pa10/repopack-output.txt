This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-02T02:34:05.048Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
Account_app.cpp
Yuto_Kohata_Account.cpp
Yuto_Kohata_Account.h
Yuto_Kohata_CheckingAccount.cpp
Yuto_Kohata_CheckingAccount.h
Yuto_Kohata_SavingsAccount.cpp
Yuto_Kohata_SavingsAccount.h

================================================================
Repository Files
================================================================

================
File: Account_app.cpp
================
#include <iostream>
#include <iomanip>
#include "Yuto_Kohata_Account.h"        // Account class definition
#include "Yuto_Kohata_SavingsAccount.h" // SavingsAccount class definition
#include "Yuto_Kohata_CheckingAccount.h" // CheckingAccount class definition
using namespace std;

int main()
{
   Account account1( 10.0 ); // create Account object
   SavingsAccount account2( 95.0, .03 ); // create SavingsAccount object
   CheckingAccount account3( 110.0, 1.0 ); // create CheckingAccount object

   cout << fixed << setprecision( 2 );

   // display initial balance of each object
   cout << "account1 balance: $" << account1.getBalance() << endl;
   cout << "account2 balance: $" << account2.getBalance() << endl;
   cout << "account3 balance: $" << account3.getBalance() << endl;

   cout << "\nAttempting to debit $25.00 from account1." << endl;
   account1.debit( 15.0 ); // try to debit $25.00 from account1
   cout << "\nAttempting to debit $30.00 from account2." << endl;
   account2.debit( 39.0 ); // try to debit $30.00 from account2
   cout << "\nAttempting to debit $40.00 from account3." << endl;
   account3.debit( 43.0 ); // try to debit $40.00 from account3

   // display balances
   cout << "\naccount1 balance: $" << account1.getBalance() << endl;
   cout << "account2 balance: $" << account2.getBalance() << endl;
   cout << "account3 balance: $" << account3.getBalance() << endl;

   cout << "\nCrediting $40.00 to account1." << endl;
   account1.credit( 50.0 ); // credit $40.00 to account1
   cout << "\nCrediting $65.00 to account2." << endl;
   account2.credit( 15.0 ); // credit $65.00 to account2
   cout << "\nCrediting $20.00 to account3." << endl;
   account3.credit( 30.0 ); // credit $20.00 to account3

   // display balances
   cout << "\naccount1 balance: $" << account1.getBalance() << endl;
   cout << "account2 balance: $" << account2.getBalance() << endl;
   cout << "account3 balance: $" << account3.getBalance() << endl;

   // add interest to SavingsAccount object account2
   double interestEarned = account2.calculateInterest();
   cout << "\nAdding $" << interestEarned << " interest to account2." 
      << endl;
   account2.credit( interestEarned );

   cout << "\nNew account2 balance: $" << account2.getBalance() << endl;

   system("PAUSE");
   return 0;
   
}

================
File: Yuto_Kohata_Account.cpp
================
// Yuto_Kohata_Account.cpp
// COMSC 200 Fall 2024
// Programming Assignment 10

#include <iostream>
#include "Yuto_Kohata_Account.h"

// Constructor
Account::Account(double initialBalance) {
    // Validate initialBalance
    if (initialBalance >= 0.0) {
        balance = initialBalance;
    }
    else {
        balance = 0.0;
        std::cout << "Error: Initial balance cannot be negative. Balance set to 0.0" << std::endl;
    }
}

// Credit function
bool Account::credit(double amount) {
    balance += amount;
    return true;
}

// Debit function
bool Account::debit(double amount) {
    if (amount <= balance) {
        balance -= amount;
        return true;
    }
    else {
        std::cout << "Debit amount exceeded account balance." << std::endl;
        return false;
    }
}

// Get balance
double Account::getBalance() const {
    return balance;
}

================
File: Yuto_Kohata_Account.h
================
// Yuto_Kohata_Account.h
// COMSC 200 Fall 2024
// Programming Assignment 10

#ifndef ACCOUNT_H
#define ACCOUNT_H

class Account {
private:
    double balance; // Account balance

public:
    // Constructor
    Account(double initialBalance);
    
    // Member functions
    virtual bool credit(double amount);
    virtual bool debit(double amount);
    double getBalance() const;
};

#endif

================
File: Yuto_Kohata_CheckingAccount.cpp
================
// Yuto_Kohata_CheckingAccount.cpp
// COMSC 200 Fall 2024
// Programming Assignment 10

#include "Yuto_Kohata_CheckingAccount.h"
#include <iostream>

// Constructor
CheckingAccount::CheckingAccount(double initialBalance, double fee)
    : Account(initialBalance) {
    transactionFee = (fee >= 0.0) ? fee : 0.0;
}

// Override credit function
bool CheckingAccount::credit(double amount) {
    if (Account::credit(amount)) {
        // If credit was successful, charge transaction fee
        return Account::debit(transactionFee);
    }
    return false;
}

// Override debit function
bool CheckingAccount::debit(double amount) {
    if (Account::debit(amount)) {
        // If debit was successful, charge transaction fee
        return Account::debit(transactionFee);
    }
    return false;
}

================
File: Yuto_Kohata_CheckingAccount.h
================
// Yuto_Kohata_CheckingAccount.h
// COMSC 200 Fall 2024
// Programming Assignment 10

#ifndef CHECKING_ACCOUNT_H
#define CHECKING_ACCOUNT_H

#include "Yuto_Kohata_Account.h"

class CheckingAccount : public Account {
private:
    double transactionFee; // Fee charged per transaction

public:
    // Constructor
    CheckingAccount(double initialBalance, double fee);
    
    // Override credit and debit functions
    virtual bool credit(double amount) override;
    virtual bool debit(double amount) override;
};

#endif

================
File: Yuto_Kohata_SavingsAccount.cpp
================
// Yuto_Kohata_SavingsAccount.cpp
// COMSC 200 Fall 2024
// Programming Assignment 10

#include "Yuto_Kohata_SavingsAccount.h"

// Constructor
SavingsAccount::SavingsAccount(double initialBalance, double rate)
    : Account(initialBalance) {
    interestRate = (rate >= 0.0) ? rate : 0.0;
}

// Calculate interest
double SavingsAccount::calculateInterest() const {
    return getBalance() * interestRate;
}

================
File: Yuto_Kohata_SavingsAccount.h
================
// Yuto_Kohata_SavingsAccount.h
// COMSC 200 Fall 2024
// Programming Assignment 10

#ifndef SAVINGS_ACCOUNT_H
#define SAVINGS_ACCOUNT_H

#include "Yuto_Kohata_Account.h"

class SavingsAccount : public Account {
private:
    double interestRate; // Interest rate (percentage)

public:
    // Constructor
    SavingsAccount(double initialBalance, double rate);
    
    // Calculate interest
    double calculateInterest() const;
};

#endif
